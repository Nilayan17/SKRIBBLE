{"ast":null,"code":"var _jsxFileName = \"/home/nilayan/Desktop/SKRIBBLE/client/src/components/Canvas/Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:4000');\nconst Canvas = ({\n  roomId,\n  username\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    // console.log(canvas.width);\n    // canvas.width = window.innerWidth * 0.9;\n    // canvas.height = window.innerHeight * 0.7;\n    canvas.width = 800;\n    canvas.height = 600;\n    canvas.style.border = '2px solid black';\n    const context = canvas.getContext('2d');\n    context.lineCap = 'round';\n    context.strokeStyle = 'black';\n    context.lineWidth = 3;\n    contextRef.current = context;\n    socket.on('connection', () => {});\n    return () => {\n      socket.off('startDrawing');\n      socket.off('draw');\n      socket.off('stopDrawing');\n      socket.off('clear');\n    };\n  }, [roomId]);\n  const startDrawing = ({\n    nativeEvent\n  }) => {\n    console.log(\"attempting to draw\");\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n    setIsDrawing(true);\n    socket.emit('startDrawing', {\n      offsetX,\n      offsetY,\n      roomId,\n      username\n    });\n  };\n  const draw = ({\n    nativeEvent\n  }) => {\n    if (!isDrawing) {\n      return;\n    }\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    socket.emit('draw', {\n      offsetX,\n      offsetY,\n      roomId,\n      username\n    });\n  };\n  const stopDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n    socket.emit('stopDrawing', {\n      roomId,\n      username\n    });\n  };\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    contextRef.current.clearRect(0, 0, canvas.width, canvas.height);\n    socket.emit('clear', {\n      roomId,\n      username\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas-container\",\n    style: {\n      margin: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      onMouseDown: startDrawing,\n      onMouseMove: draw,\n      onMouseUp: stopDrawing,\n      onMouseLeave: stopDrawing,\n      onClick: draw\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearCanvas,\n      children: \" Clear Drawing \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 7\n  }, this);\n};\n_s(Canvas, \"deDGxNBrSwuQyYRoZRn3CQiJKJQ=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","io","jsxDEV","_jsxDEV","socket","Canvas","roomId","username","_s","canvasRef","contextRef","isDrawing","setIsDrawing","canvas","current","width","height","style","border","context","getContext","lineCap","strokeStyle","lineWidth","on","off","startDrawing","nativeEvent","console","log","offsetX","offsetY","beginPath","moveTo","lineTo","stroke","emit","draw","stopDrawing","closePath","clearCanvas","clearRect","className","margin","children","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/nilayan/Desktop/SKRIBBLE/client/src/components/Canvas/Canvas.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\n\nconst socket = io('http://localhost:4000');\n\nconst Canvas = ({roomId, username}) => {\n   const canvasRef = useRef(null);\n   const contextRef = useRef(null);\n   const [isDrawing ,setIsDrawing] = useState(false);\n   \n   useEffect(() => {\n      const canvas = canvasRef.current;\n      // console.log(canvas.width);\n      // canvas.width = window.innerWidth * 0.9;\n      // canvas.height = window.innerHeight * 0.7;\n      canvas.width = 800; \n      canvas.height = 600; \n      canvas.style.border = '2px solid black';\n\n      const context = canvas.getContext('2d');\n      context.lineCap = 'round';\n      context.strokeStyle = 'black';\n      context.lineWidth = 3;\n      contextRef.current = context;\n      socket.on('connection', () => {\n\n      })\n      \n\n      return () => {\n         socket.off('startDrawing');\n         socket.off('draw');\n         socket.off('stopDrawing');\n         socket.off('clear');\n      };\n   }, [roomId]);\n\n   const startDrawing = ({nativeEvent}) => {\n      console.log(\"attempting to draw\");\n      const {offsetX, offsetY} = nativeEvent;\n      contextRef.current.beginPath();\n      contextRef.current.moveTo(offsetX, offsetY);\n      contextRef.current.lineTo(offsetX, offsetY);\n      contextRef.current.stroke();\n      setIsDrawing(true);\n      socket.emit('startDrawing', \n         {offsetX, offsetY, roomId , username});\n   };\n\n   const draw = ({nativeEvent}) => {\n      if (!isDrawing) {\n         return;\n      }\n      const {offsetX, offsetY} = nativeEvent;\n      contextRef.current.lineTo(offsetX, offsetY);\n      contextRef.current.stroke();\n      contextRef.current.beginPath();\n      contextRef.current.moveTo(offsetX, offsetY);\n      socket.emit('draw', {offsetX, offsetY, roomId , username});\n   };\n\n   const stopDrawing = () => {\n      contextRef.current.closePath();\n      setIsDrawing(false);\n      socket.emit('stopDrawing', {roomId , username});\n   };\n\n   const clearCanvas = () => {\n      const canvas = canvasRef.current;\n      contextRef.current.clearRect(0, 0, canvas.width, canvas.height);\n      socket.emit('clear', {roomId , username});\n   }\n\n   return (\n      <div className='canvas-container' style={{margin: '20px'}}>\n         <canvas \n            ref = {canvasRef}\n            onMouseDown = {startDrawing}\n            onMouseMove = {draw}\n            onMouseUp = {stopDrawing}\n            onMouseLeave = {stopDrawing}\n            onClick = {draw}\n         />\n         <br />\n         <button onClick = { clearCanvas }> Clear Drawing </button>\n      </div>\n   );\n}\n\n\nexport default Canvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}